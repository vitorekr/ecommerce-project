version: '3.8'

services:
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: sqlserver
    ports:
      - "1433:1433"
    environment:
      SA_PASSWORD: "Str0ngP@ss!"
      ACCEPT_EULA: "Y"
    volumes:
      - sqlserver_data:/var/opt/mssql
    networks:
      - ecommerce-network
    healthcheck:
      test: [ "CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S localhost -C -U sa -P Str0ngP@ss! -Q 'SELECT 1' || exit 1" ]
      interval: 10s
      retries: 5
      start_period: 30s

  catalog-service:
    entrypoint: ["sh", "-c", "sleep 10 && dotnet CatalogService.dll"]
    build:
      context: ./CatalogService
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5000
      - ConnectionStrings__DefaultConnection=Server=sqlserver,1433;Database=CatalogDb;User Id=sa;Password=Str0ngP@ss!;Encrypt=False;TrustServerCertificate=True;
    depends_on:
      sqlserver:
        condition: service_healthy
    networks:
      - ecommerce-network
    command: ["sh", "-c", "sleep 10 && dotnet ef database update && dotnet CatalogService.dll"]

  order-service:
    build:
      context: ./OrderService
      dockerfile: Dockerfile
    ports:
      - "5001:5001"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5001
      - ConnectionStrings__DefaultConnection=Server=sqlserver,1433;Database=CatalogDb;User Id=sa;Password=Str0ngP@ss!;Encrypt=False;TrustServerCertificate=True;
    depends_on:
      sqlserver:
        condition: service_healthy
    networks:
      - ecommerce-network

  payment-service:
    build:
      context: ./PaymentService
      dockerfile: Dockerfile
    ports:
      - "5002:5002"
    depends_on:
      sqlserver:
        condition: service_healthy
    networks:
      - ecommerce-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - ecommerce-network

  api-gateway:
    build:
      context: ./APIGateway
      dockerfile: Dockerfile
    ports:
      - "8080:8000"
    depends_on:
      - rabbitmq
      - catalog-service
      - order-service
      - payment-service
    networks:
      - ecommerce-network
  auth-service:
    build:
      context: ./AuthService
      dockerfile: Dockerfile
    ports:
      - "5003:5003"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5003
    depends_on:
      sqlserver:
        condition: service_healthy
    networks:
      - ecommerce-network
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - catalog-service
      - order-service
      - payment-service

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus



volumes:
  sqlserver_data:

networks:
  ecommerce-network:
    driver: bridge
    name: ecommerce-network
